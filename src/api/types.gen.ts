// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: 'http://localhost:5001' | (string & {});
};

export type User = {
    _id?: string;
    email?: string;
    name?: string;
    isVerified?: boolean;
    createdAt?: string;
    updatedAt?: string;
};

export type _Error = {
    success?: boolean;
    message?: string;
    error?: string;
};

export type Book = {
    _id?: string;
    name?: string;
    author?: string;
    Category?: string;
    status?: 'purchased' | 'not_purchased';
    isRead?: boolean;
    userId?: string;
    createdAt?: string;
    updatedAt?: string;
};

export type Category = {
    _id?: string;
    name?: string;
    icon?: string;
    userId?: string;
    createdAt?: string;
    updatedAt?: string;
};

export type Dowry = {
    _id?: string;
    name?: string;
    description?: string;
    Category?: {
        _id?: string;
        name?: string;
        icon?: string;
    };
    dowryPrice?: number;
    /**
     * Image ID reference
     */
    dowryImage?: string;
    dowryLocation?: string;
    status?: 'purchased' | 'not_purchased';
    userId?: string;
    createdAt?: string;
    updatedAt?: string;
};

export type Image = {
    _id?: string;
    filename?: string;
    originalName?: string;
    contentType?: string;
    size?: number;
    uploadDate?: string;
    userId?: string;
    dowryId?: string;
};

export type BookInfo = {
    title?: string;
    author?: string;
};

export type PostApiAuthSignupData = {
    body: {
        email: string;
        password: string;
        name: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/signup';
};

export type PostApiAuthSignupErrors = {
    /**
     * Bad request
     */
    400: _Error;
};

export type PostApiAuthSignupError = PostApiAuthSignupErrors[keyof PostApiAuthSignupErrors];

export type PostApiAuthSignupResponses = {
    /**
     * User created successfully
     */
    201: {
        success?: boolean;
        message?: string;
        user?: User;
    };
};

export type PostApiAuthSignupResponse = PostApiAuthSignupResponses[keyof PostApiAuthSignupResponses];

export type PostApiAuthVerifyEmailData = {
    body: {
        code: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/verify-email';
};

export type PostApiAuthVerifyEmailErrors = {
    /**
     * Invalid verification code
     */
    400: _Error;
};

export type PostApiAuthVerifyEmailError = PostApiAuthVerifyEmailErrors[keyof PostApiAuthVerifyEmailErrors];

export type PostApiAuthVerifyEmailResponses = {
    /**
     * Email verified successfully
     */
    200: {
        success?: boolean;
        message?: string;
    };
};

export type PostApiAuthVerifyEmailResponse = PostApiAuthVerifyEmailResponses[keyof PostApiAuthVerifyEmailResponses];

export type PostApiAuthLoginData = {
    body: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type PostApiAuthLoginErrors = {
    /**
     * Invalid credentials
     */
    401: _Error;
};

export type PostApiAuthLoginError = PostApiAuthLoginErrors[keyof PostApiAuthLoginErrors];

export type PostApiAuthLoginResponses = {
    /**
     * Login successful
     */
    200: {
        success?: boolean;
        message?: string;
        user?: User;
        accessToken?: string;
        refreshToken?: string;
    };
};

export type PostApiAuthLoginResponse = PostApiAuthLoginResponses[keyof PostApiAuthLoginResponses];

export type PostApiAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type PostApiAuthLogoutResponses = {
    /**
     * Logout successful
     */
    200: {
        success?: boolean;
        message?: string;
    };
};

export type PostApiAuthLogoutResponse = PostApiAuthLogoutResponses[keyof PostApiAuthLogoutResponses];

export type GetApiAuthCheckAuthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/check-auth';
};

export type GetApiAuthCheckAuthErrors = {
    /**
     * Not authenticated
     */
    401: _Error;
};

export type GetApiAuthCheckAuthError = GetApiAuthCheckAuthErrors[keyof GetApiAuthCheckAuthErrors];

export type GetApiAuthCheckAuthResponses = {
    /**
     * User is authenticated
     */
    200: {
        success?: boolean;
        user?: User;
    };
};

export type GetApiAuthCheckAuthResponse = GetApiAuthCheckAuthResponses[keyof GetApiAuthCheckAuthResponses];

export type PostApiAuthForgotPasswordData = {
    body: {
        email: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/forgot-password';
};

export type PostApiAuthForgotPasswordErrors = {
    /**
     * User not found
     */
    404: _Error;
};

export type PostApiAuthForgotPasswordError = PostApiAuthForgotPasswordErrors[keyof PostApiAuthForgotPasswordErrors];

export type PostApiAuthForgotPasswordResponses = {
    /**
     * Password reset email sent
     */
    200: {
        success?: boolean;
        message?: string;
    };
};

export type PostApiAuthForgotPasswordResponse = PostApiAuthForgotPasswordResponses[keyof PostApiAuthForgotPasswordResponses];

export type PostApiAuthResetPasswordData = {
    body: {
        resetToken: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/reset-password';
};

export type PostApiAuthResetPasswordErrors = {
    /**
     * Invalid token
     */
    400: _Error;
};

export type PostApiAuthResetPasswordError = PostApiAuthResetPasswordErrors[keyof PostApiAuthResetPasswordErrors];

export type PostApiAuthResetPasswordResponses = {
    /**
     * Password reset successful
     */
    200: {
        success?: boolean;
        message?: string;
    };
};

export type PostApiAuthResetPasswordResponse = PostApiAuthResetPasswordResponses[keyof PostApiAuthResetPasswordResponses];

export type PostApiAuthRefreshTokenData = {
    body: {
        refreshToken: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/refresh-token';
};

export type PostApiAuthRefreshTokenErrors = {
    /**
     * Invalid refresh token
     */
    401: _Error;
};

export type PostApiAuthRefreshTokenError = PostApiAuthRefreshTokenErrors[keyof PostApiAuthRefreshTokenErrors];

export type PostApiAuthRefreshTokenResponses = {
    /**
     * Token refreshed successfully
     */
    200: {
        success?: boolean;
        accessToken?: string;
        refreshToken?: string;
    };
};

export type PostApiAuthRefreshTokenResponse = PostApiAuthRefreshTokenResponses[keyof PostApiAuthRefreshTokenResponses];

export type PostApiAuthChangePasswordData = {
    body: {
        currentPassword: string;
        newPassword: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/change-password';
};

export type PostApiAuthChangePasswordErrors = {
    /**
     * Invalid current password
     */
    400: _Error;
};

export type PostApiAuthChangePasswordError = PostApiAuthChangePasswordErrors[keyof PostApiAuthChangePasswordErrors];

export type PostApiAuthChangePasswordResponses = {
    /**
     * Password changed successfully
     */
    200: {
        success?: boolean;
        message?: string;
    };
};

export type PostApiAuthChangePasswordResponse = PostApiAuthChangePasswordResponses[keyof PostApiAuthChangePasswordResponses];

export type PostApiBookCreateData = {
    body: {
        text: string;
        categoryId: string;
    };
    path?: never;
    query?: never;
    url: '/api/book/create';
};

export type PostApiBookCreateErrors = {
    /**
     * Bad request
     */
    400: _Error;
};

export type PostApiBookCreateError = PostApiBookCreateErrors[keyof PostApiBookCreateErrors];

export type PostApiBookCreateResponses = {
    /**
     * Books added successfully
     */
    201: {
        success?: boolean;
        message?: string;
        data?: {
            created?: Array<{
                bookName?: string;
                author?: string;
                id?: string;
            }>;
            errors?: Array<{
                [key: string]: unknown;
            }>;
            summary?: {
                total?: number;
                successful?: number;
                failed?: number;
            };
        };
    };
};

export type PostApiBookCreateResponse = PostApiBookCreateResponses[keyof PostApiBookCreateResponses];

export type GetApiBookGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by status
         */
        status?: 'purchased' | 'not_purchased';
        /**
         * Filter by category ID
         */
        Category?: string;
        /**
         * Filter by read status
         */
        isRead?: boolean;
        /**
         * Search in name and author
         */
        search?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/api/book/get';
};

export type GetApiBookGetResponses = {
    /**
     * Books fetched successfully
     */
    200: {
        success?: boolean;
        message?: string;
        books?: Array<Book>;
        pagination?: {
            total?: number;
            page?: number;
            pages?: number;
            limit?: number;
        };
    };
};

export type GetApiBookGetResponse = GetApiBookGetResponses[keyof GetApiBookGetResponses];

export type PutApiBookUpdateByIdData = {
    body: {
        name?: string;
        author?: string;
        Category?: string;
        status?: 'purchased' | 'not_purchased';
        isRead?: boolean;
    };
    path: {
        /**
         * Book ID
         */
        id: string;
    };
    query?: never;
    url: '/api/book/update/{id}';
};

export type PutApiBookUpdateByIdErrors = {
    /**
     * Book not found
     */
    404: _Error;
};

export type PutApiBookUpdateByIdError = PutApiBookUpdateByIdErrors[keyof PutApiBookUpdateByIdErrors];

export type PutApiBookUpdateByIdResponses = {
    /**
     * Book updated successfully
     */
    200: {
        success?: boolean;
        message?: string;
        book?: Book;
    };
};

export type PutApiBookUpdateByIdResponse = PutApiBookUpdateByIdResponses[keyof PutApiBookUpdateByIdResponses];

export type PatchApiBookUpdateStatusByIdData = {
    body: {
        status: 'purchased' | 'not_purchased';
    };
    path: {
        /**
         * Book ID
         */
        id: string;
    };
    query?: never;
    url: '/api/book/update-status/{id}';
};

export type PatchApiBookUpdateStatusByIdErrors = {
    /**
     * Bad request
     */
    400: _Error;
    /**
     * Book not found
     */
    404: _Error;
};

export type PatchApiBookUpdateStatusByIdError = PatchApiBookUpdateStatusByIdErrors[keyof PatchApiBookUpdateStatusByIdErrors];

export type PatchApiBookUpdateStatusByIdResponses = {
    /**
     * Book status updated successfully
     */
    200: {
        success?: boolean;
        message?: string;
        book?: Book;
    };
};

export type PatchApiBookUpdateStatusByIdResponse = PatchApiBookUpdateStatusByIdResponses[keyof PatchApiBookUpdateStatusByIdResponses];

export type DeleteApiBookDeleteByIdData = {
    body?: never;
    path: {
        /**
         * Book ID
         */
        id: string;
    };
    query?: never;
    url: '/api/book/delete/{id}';
};

export type DeleteApiBookDeleteByIdErrors = {
    /**
     * Book not found
     */
    404: _Error;
};

export type DeleteApiBookDeleteByIdError = DeleteApiBookDeleteByIdErrors[keyof DeleteApiBookDeleteByIdErrors];

export type DeleteApiBookDeleteByIdResponses = {
    /**
     * Book deleted successfully
     */
    200: {
        success?: boolean;
        message?: string;
    };
};

export type DeleteApiBookDeleteByIdResponse = DeleteApiBookDeleteByIdResponses[keyof DeleteApiBookDeleteByIdResponses];

export type PostApiCategoryAddData = {
    body: {
        name: string;
        icon: string;
    };
    path?: never;
    query?: never;
    url: '/api/category/add';
};

export type PostApiCategoryAddErrors = {
    /**
     * Bad request
     */
    400: _Error;
};

export type PostApiCategoryAddError = PostApiCategoryAddErrors[keyof PostApiCategoryAddErrors];

export type PostApiCategoryAddResponses = {
    /**
     * Category added successfully
     */
    201: Category;
};

export type PostApiCategoryAddResponse = PostApiCategoryAddResponses[keyof PostApiCategoryAddResponses];

export type GetApiCategoryGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/category/get';
};

export type GetApiCategoryGetResponses = {
    /**
     * Categories fetched successfully
     */
    200: {
        success?: boolean;
        categories?: Array<Category>;
    };
};

export type GetApiCategoryGetResponse = GetApiCategoryGetResponses[keyof GetApiCategoryGetResponses];

export type DeleteApiCategoryDeleteByIdData = {
    body?: never;
    path: {
        /**
         * Category ID
         */
        id: string;
    };
    query?: never;
    url: '/api/category/delete/{id}';
};

export type DeleteApiCategoryDeleteByIdResponses = {
    /**
     * Category deleted successfully
     */
    200: Category;
};

export type DeleteApiCategoryDeleteByIdResponse = DeleteApiCategoryDeleteByIdResponses[keyof DeleteApiCategoryDeleteByIdResponses];

export type PostApiDowryCreateData = {
    body: {
        name: string;
        description?: string;
        /**
         * Category ID reference
         */
        Category: string;
        dowryPrice?: number;
        /**
         * Image ID from uploaded image
         */
        imageId?: string;
        dowryLocation?: string;
        /**
         * Valid URL format required (e.g., https://example.com)
         */
        url?: string;
        status?: 'purchased' | 'not_purchased';
    };
    path?: never;
    query?: never;
    url: '/api/dowry/create';
};

export type PostApiDowryCreateErrors = {
    /**
     * Bad request
     */
    400: _Error;
};

export type PostApiDowryCreateError = PostApiDowryCreateErrors[keyof PostApiDowryCreateErrors];

export type PostApiDowryCreateResponses = {
    /**
     * Dowry created successfully
     */
    201: {
        success?: boolean;
        message?: string;
        dowry?: Dowry;
    };
};

export type PostApiDowryCreateResponse = PostApiDowryCreateResponses[keyof PostApiDowryCreateResponses];

export type GetApiDowryGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by purchase status
         */
        status?: 'purchased' | 'not_purchased';
        /**
         * Filter by category ID
         */
        Category?: string;
        /**
         * Search in name and description fields
         */
        search?: string;
        /**
         * Filter by read status (for books)
         */
        isRead?: boolean;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/api/dowry/get';
};

export type GetApiDowryGetErrors = {
    /**
     * Bad request
     */
    400: _Error;
};

export type GetApiDowryGetError = GetApiDowryGetErrors[keyof GetApiDowryGetErrors];

export type GetApiDowryGetResponses = {
    /**
     * Dowries retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        dowries?: Array<Dowry>;
        pagination?: {
            total?: number;
            page?: number;
            pages?: number;
            limit?: number;
        };
    };
};

export type GetApiDowryGetResponse = GetApiDowryGetResponses[keyof GetApiDowryGetResponses];

export type GetApiDowryGetByIdData = {
    body?: never;
    path: {
        /**
         * Dowry ID
         */
        id: string;
    };
    query?: never;
    url: '/api/dowry/get/{id}';
};

export type GetApiDowryGetByIdErrors = {
    /**
     * Dowry not found
     */
    404: _Error;
};

export type GetApiDowryGetByIdError = GetApiDowryGetByIdErrors[keyof GetApiDowryGetByIdErrors];

export type GetApiDowryGetByIdResponses = {
    /**
     * Dowry retrieved successfully
     */
    200: {
        success?: boolean;
        dowry?: Dowry;
    };
};

export type GetApiDowryGetByIdResponse = GetApiDowryGetByIdResponses[keyof GetApiDowryGetByIdResponses];

export type PutApiDowryUpdateByIdData = {
    body: {
        name?: string;
        description?: string;
        /**
         * Category ID reference
         */
        Category?: string;
        dowryPrice?: number;
        /**
         * Image ID from uploaded image
         */
        imageId?: string;
        dowryLocation?: string;
        /**
         * Valid URL format required (e.g., https://example.com)
         */
        url?: string;
        status?: 'purchased' | 'not_purchased';
    };
    path: {
        /**
         * Dowry ID
         */
        id: string;
    };
    query?: never;
    url: '/api/dowry/update/{id}';
};

export type PutApiDowryUpdateByIdErrors = {
    /**
     * Dowry not found
     */
    404: _Error;
};

export type PutApiDowryUpdateByIdError = PutApiDowryUpdateByIdErrors[keyof PutApiDowryUpdateByIdErrors];

export type PutApiDowryUpdateByIdResponses = {
    /**
     * Dowry updated successfully
     */
    200: {
        success?: boolean;
        message?: string;
        dowry?: Dowry;
    };
};

export type PutApiDowryUpdateByIdResponse = PutApiDowryUpdateByIdResponses[keyof PutApiDowryUpdateByIdResponses];

export type PatchApiDowryStatusByIdData = {
    body: {
        status: 'purchased' | 'not_purchased';
    };
    path: {
        /**
         * Dowry ID
         */
        id: string;
    };
    query?: never;
    url: '/api/dowry/status/{id}';
};

export type PatchApiDowryStatusByIdErrors = {
    /**
     * Bad request
     */
    400: _Error;
    /**
     * Dowry not found
     */
    404: _Error;
};

export type PatchApiDowryStatusByIdError = PatchApiDowryStatusByIdErrors[keyof PatchApiDowryStatusByIdErrors];

export type PatchApiDowryStatusByIdResponses = {
    /**
     * Dowry status updated successfully
     */
    200: {
        success?: boolean;
        message?: string;
        dowry?: Dowry;
    };
};

export type PatchApiDowryStatusByIdResponse = PatchApiDowryStatusByIdResponses[keyof PatchApiDowryStatusByIdResponses];

export type DeleteApiDowryImageByIdData = {
    body?: never;
    path: {
        /**
         * Dowry ID
         */
        id: string;
    };
    query?: never;
    url: '/api/dowry/image/{id}';
};

export type DeleteApiDowryImageByIdErrors = {
    /**
     * Dowry not found or has no image to delete
     */
    404: _Error;
    /**
     * Error deleting image from database
     */
    500: _Error;
};

export type DeleteApiDowryImageByIdError = DeleteApiDowryImageByIdErrors[keyof DeleteApiDowryImageByIdErrors];

export type DeleteApiDowryImageByIdResponses = {
    /**
     * Dowry image deleted successfully
     */
    200: {
        success?: boolean;
        message?: string;
        dowry?: Dowry;
    };
};

export type DeleteApiDowryImageByIdResponse = DeleteApiDowryImageByIdResponses[keyof DeleteApiDowryImageByIdResponses];

export type PatchApiDowryImageByIdData = {
    body: {
        /**
         * Image ID from uploaded image
         */
        imageId: string;
    };
    path: {
        /**
         * Dowry ID
         */
        id: string;
    };
    query?: never;
    url: '/api/dowry/image/{id}';
};

export type PatchApiDowryImageByIdErrors = {
    /**
     * Bad request - Invalid or missing imageId
     */
    400: _Error;
    /**
     * Dowry not found
     */
    404: _Error;
};

export type PatchApiDowryImageByIdError = PatchApiDowryImageByIdErrors[keyof PatchApiDowryImageByIdErrors];

export type PatchApiDowryImageByIdResponses = {
    /**
     * Dowry image updated successfully
     */
    200: {
        success?: boolean;
        message?: string;
        dowry?: Dowry;
    };
};

export type PatchApiDowryImageByIdResponse = PatchApiDowryImageByIdResponses[keyof PatchApiDowryImageByIdResponses];

export type DeleteApiDowryDeleteByIdData = {
    body?: never;
    path: {
        /**
         * Dowry ID
         */
        id: string;
    };
    query?: never;
    url: '/api/dowry/delete/{id}';
};

export type DeleteApiDowryDeleteByIdErrors = {
    /**
     * Dowry not found
     */
    404: _Error;
};

export type DeleteApiDowryDeleteByIdError = DeleteApiDowryDeleteByIdErrors[keyof DeleteApiDowryDeleteByIdErrors];

export type DeleteApiDowryDeleteByIdResponses = {
    /**
     * Dowry deleted successfully
     */
    200: {
        success?: boolean;
        message?: string;
    };
};

export type DeleteApiDowryDeleteByIdResponse = DeleteApiDowryDeleteByIdResponses[keyof DeleteApiDowryDeleteByIdResponses];

export type PostApiImageUploadData = {
    body: {
        /**
         * Image file to upload
         */
        image: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/api/image/upload';
};

export type PostApiImageUploadErrors = {
    /**
     * Bad request
     */
    400: _Error;
};

export type PostApiImageUploadError = PostApiImageUploadErrors[keyof PostApiImageUploadErrors];

export type PostApiImageUploadResponses = {
    /**
     * Image uploaded successfully
     */
    201: {
        success?: boolean;
        message?: string;
        image?: Image;
    };
};

export type PostApiImageUploadResponse = PostApiImageUploadResponses[keyof PostApiImageUploadResponses];

export type DeleteApiImageByIdData = {
    body?: never;
    path: {
        /**
         * Image ID
         */
        id: string;
    };
    query?: never;
    url: '/api/image/{id}';
};

export type DeleteApiImageByIdErrors = {
    /**
     * Image not found
     */
    404: _Error;
};

export type DeleteApiImageByIdError = DeleteApiImageByIdErrors[keyof DeleteApiImageByIdErrors];

export type DeleteApiImageByIdResponses = {
    /**
     * Image deleted successfully
     */
    200: {
        success?: boolean;
        message?: string;
    };
};

export type DeleteApiImageByIdResponse = DeleteApiImageByIdResponses[keyof DeleteApiImageByIdResponses];

export type GetApiImageByIdData = {
    body?: never;
    path: {
        /**
         * Image ID
         */
        id: string;
    };
    query?: never;
    url: '/api/image/{id}';
};

export type GetApiImageByIdErrors = {
    /**
     * Image not found
     */
    404: _Error;
};

export type GetApiImageByIdError = GetApiImageByIdErrors[keyof GetApiImageByIdErrors];

export type GetApiImageByIdResponses = {
    /**
     * Image retrieved successfully
     */
    200: Blob | File;
};

export type GetApiImageByIdResponse = GetApiImageByIdResponses[keyof GetApiImageByIdResponses];

export type GetApiImageUserImagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/image/user/images';
};

export type GetApiImageUserImagesResponses = {
    /**
     * Images retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        images?: Array<Image>;
    };
};

export type GetApiImageUserImagesResponse = GetApiImageUserImagesResponses[keyof GetApiImageUserImagesResponses];

export type PostApiImageOcrByIdData = {
    body?: never;
    path: {
        /**
         * Image ID to process
         */
        id: string;
    };
    query?: never;
    url: '/api/image/ocr/{id}';
};

export type PostApiImageOcrByIdErrors = {
    /**
     * Image not found
     */
    404: _Error;
    /**
     * OCR processing failed
     */
    500: _Error;
};

export type PostApiImageOcrByIdError = PostApiImageOcrByIdErrors[keyof PostApiImageOcrByIdErrors];

export type PostApiImageOcrByIdResponses = {
    /**
     * OCR processing completed successfully
     */
    200: {
        success?: boolean;
        message?: string;
        bookInfo?: BookInfo;
    };
};

export type PostApiImageOcrByIdResponse = PostApiImageOcrByIdResponses[keyof PostApiImageOcrByIdResponses];
