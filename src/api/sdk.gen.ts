// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteApiBookDeleteByIdData, DeleteApiBookDeleteByIdErrors, DeleteApiBookDeleteByIdResponses, DeleteApiCategoryDeleteByIdData, DeleteApiCategoryDeleteByIdResponses, DeleteApiDowryDeleteByIdData, DeleteApiDowryDeleteByIdErrors, DeleteApiDowryDeleteByIdResponses, DeleteApiDowryImageByIdData, DeleteApiDowryImageByIdErrors, DeleteApiDowryImageByIdResponses, DeleteApiImageByIdData, DeleteApiImageByIdErrors, DeleteApiImageByIdResponses, GetApiAuthCheckAuthData, GetApiAuthCheckAuthErrors, GetApiAuthCheckAuthResponses, GetApiBookGetData, GetApiBookGetResponses, GetApiCategoryGetData, GetApiCategoryGetResponses, GetApiDowryGetByIdData, GetApiDowryGetByIdErrors, GetApiDowryGetByIdResponses, GetApiDowryGetData, GetApiDowryGetErrors, GetApiDowryGetResponses, GetApiImageByIdData, GetApiImageByIdErrors, GetApiImageByIdResponses, GetApiImageUserImagesData, GetApiImageUserImagesResponses, PatchApiBookUpdateStatusByIdData, PatchApiBookUpdateStatusByIdErrors, PatchApiBookUpdateStatusByIdResponses, PatchApiDowryImageByIdData, PatchApiDowryImageByIdErrors, PatchApiDowryImageByIdResponses, PatchApiDowryStatusByIdData, PatchApiDowryStatusByIdErrors, PatchApiDowryStatusByIdResponses, PostApiAuthChangePasswordData, PostApiAuthChangePasswordErrors, PostApiAuthChangePasswordResponses, PostApiAuthForgotPasswordData, PostApiAuthForgotPasswordErrors, PostApiAuthForgotPasswordResponses, PostApiAuthLoginData, PostApiAuthLoginErrors, PostApiAuthLoginResponses, PostApiAuthLogoutData, PostApiAuthLogoutResponses, PostApiAuthRefreshTokenData, PostApiAuthRefreshTokenErrors, PostApiAuthRefreshTokenResponses, PostApiAuthResetPasswordData, PostApiAuthResetPasswordErrors, PostApiAuthResetPasswordResponses, PostApiAuthSignupData, PostApiAuthSignupErrors, PostApiAuthSignupResponses, PostApiAuthVerifyEmailData, PostApiAuthVerifyEmailErrors, PostApiAuthVerifyEmailResponses, PostApiBookCreateData, PostApiBookCreateErrors, PostApiBookCreateResponses, PostApiCategoryAddData, PostApiCategoryAddErrors, PostApiCategoryAddResponses, PostApiDowryCreateData, PostApiDowryCreateErrors, PostApiDowryCreateResponses, PostApiImageOcrByIdData, PostApiImageOcrByIdErrors, PostApiImageOcrByIdResponses, PostApiImageUploadData, PostApiImageUploadErrors, PostApiImageUploadResponses, PutApiBookUpdateByIdData, PutApiBookUpdateByIdErrors, PutApiBookUpdateByIdResponses, PutApiDowryUpdateByIdData, PutApiDowryUpdateByIdErrors, PutApiDowryUpdateByIdResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register a new user
 * Create a new user account
 */
export const postApiAuthSignup = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthSignupData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthSignupResponses, PostApiAuthSignupErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify user email
 * Verify user email with verification code
 */
export const postApiAuthVerifyEmail = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthVerifyEmailData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthVerifyEmailResponses, PostApiAuthVerifyEmailErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * User login
 * Authenticate user and return tokens
 */
export const postApiAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthLoginData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthLoginResponses, PostApiAuthLoginErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * User logout
 * Logout user and invalidate tokens
 */
export const postApiAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAuthLogoutResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Check authentication status
 * Verify if user is authenticated
 */
export const getApiAuthCheckAuth = <ThrowOnError extends boolean = false>(options?: Options<GetApiAuthCheckAuthData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiAuthCheckAuthResponses, GetApiAuthCheckAuthErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/check-auth',
        ...options
    });
};

/**
 * Request password reset
 * Send password reset email
 */
export const postApiAuthForgotPassword = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthForgotPasswordResponses, PostApiAuthForgotPasswordErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset password
 * Reset password with token
 */
export const postApiAuthResetPassword = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthResetPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthResetPasswordResponses, PostApiAuthResetPasswordErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh access token
 * Get new access token using refresh token
 */
export const postApiAuthRefreshToken = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthRefreshTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthRefreshTokenResponses, PostApiAuthRefreshTokenErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/refresh-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change password
 * Change user password
 */
export const postApiAuthChangePassword = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthChangePasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthChangePasswordResponses, PostApiAuthChangePasswordErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add multiple books from text
 * Add multiple books at once from formatted text (Author - Book Name per line)
 */
export const postApiBookCreate = <ThrowOnError extends boolean = false>(options: Options<PostApiBookCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiBookCreateResponses, PostApiBookCreateErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/book/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all books
 * Get all books with optional filters and pagination
 */
export const getApiBookGet = <ThrowOnError extends boolean = false>(options?: Options<GetApiBookGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiBookGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/book/get',
        ...options
    });
};

/**
 * Update a book
 * Update a book's information
 */
export const putApiBookUpdateById = <ThrowOnError extends boolean = false>(options: Options<PutApiBookUpdateByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiBookUpdateByIdResponses, PutApiBookUpdateByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/book/update/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update book status
 * Update only the status of a book
 */
export const patchApiBookUpdateStatusById = <ThrowOnError extends boolean = false>(options: Options<PatchApiBookUpdateStatusByIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchApiBookUpdateStatusByIdResponses, PatchApiBookUpdateStatusByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/book/update-status/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a book
 * Delete a book
 */
export const deleteApiBookDeleteById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiBookDeleteByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiBookDeleteByIdResponses, DeleteApiBookDeleteByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/book/delete/{id}',
        ...options
    });
};

/**
 * Add a new category
 * Add a new category
 */
export const postApiCategoryAdd = <ThrowOnError extends boolean = false>(options: Options<PostApiCategoryAddData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiCategoryAddResponses, PostApiCategoryAddErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/category/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all categories
 * Get all categories
 */
export const getApiCategoryGet = <ThrowOnError extends boolean = false>(options?: Options<GetApiCategoryGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiCategoryGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/category/get',
        ...options
    });
};

/**
 * Delete a category
 * Delete a category
 */
export const deleteApiCategoryDeleteById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiCategoryDeleteByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiCategoryDeleteByIdResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/category/delete/{id}',
        ...options
    });
};

/**
 * Create a new dowry
 * Create a new dowry item
 */
export const postApiDowryCreate = <ThrowOnError extends boolean = false>(options: Options<PostApiDowryCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiDowryCreateResponses, PostApiDowryCreateErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/dowry/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all dowries with filters
 * Get all dowries for the authenticated user with optional filtering and pagination
 */
export const getApiDowryGet = <ThrowOnError extends boolean = false>(options?: Options<GetApiDowryGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDowryGetResponses, GetApiDowryGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/dowry/get',
        ...options
    });
};

/**
 * Get dowry by ID
 * Get a specific dowry by its ID
 */
export const getApiDowryGetById = <ThrowOnError extends boolean = false>(options: Options<GetApiDowryGetByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiDowryGetByIdResponses, GetApiDowryGetByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/dowry/get/{id}',
        ...options
    });
};

/**
 * Update dowry
 * Update a specific dowry
 */
export const putApiDowryUpdateById = <ThrowOnError extends boolean = false>(options: Options<PutApiDowryUpdateByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiDowryUpdateByIdResponses, PutApiDowryUpdateByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/dowry/update/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update dowry status
 * Update the purchase status of a specific dowry
 */
export const patchApiDowryStatusById = <ThrowOnError extends boolean = false>(options: Options<PatchApiDowryStatusByIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchApiDowryStatusByIdResponses, PatchApiDowryStatusByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/dowry/status/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete dowry image
 * Delete the image of a specific dowry. The image will be removed from the database and the dowry's image reference will be cleared.
 */
export const deleteApiDowryImageById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiDowryImageByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiDowryImageByIdResponses, DeleteApiDowryImageByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/dowry/image/{id}',
        ...options
    });
};

/**
 * Update dowry image
 * Update the image of a specific dowry. If a previous image exists, it will be deleted and replaced with the new one.
 */
export const patchApiDowryImageById = <ThrowOnError extends boolean = false>(options: Options<PatchApiDowryImageByIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchApiDowryImageByIdResponses, PatchApiDowryImageByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/dowry/image/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete dowry
 * Delete a specific dowry
 */
export const deleteApiDowryDeleteById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiDowryDeleteByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiDowryDeleteByIdResponses, DeleteApiDowryDeleteByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/dowry/delete/{id}',
        ...options
    });
};

/**
 * Upload an image
 * Upload an image file. For OCR processing, use the /api/image/ocr/:id endpoint after upload.
 */
export const postApiImageUpload = <ThrowOnError extends boolean = false>(options: Options<PostApiImageUploadData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiImageUploadResponses, PostApiImageUploadErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/image/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete image
 * Delete an image file by its ID
 */
export const deleteApiImageById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiImageByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiImageByIdResponses, DeleteApiImageByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/image/{id}',
        ...options
    });
};

/**
 * Get image by ID
 * Retrieve an image file by its ID
 */
export const getApiImageById = <ThrowOnError extends boolean = false>(options: Options<GetApiImageByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiImageByIdResponses, GetApiImageByIdErrors, ThrowOnError>({
        responseType: 'blob',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/image/{id}',
        ...options
    });
};

/**
 * Get user's images
 * Get all images uploaded by the authenticated user
 */
export const getApiImageUserImages = <ThrowOnError extends boolean = false>(options?: Options<GetApiImageUserImagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiImageUserImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/image/user/images',
        ...options
    });
};

/**
 * Process image with OCR
 * Extract book title and author from an image using Tesseract OCR and Open Library API. Does not save to database, only returns the result. Frontend should check category icon before calling this endpoint.
 */
export const postApiImageOcrById = <ThrowOnError extends boolean = false>(options: Options<PostApiImageOcrByIdData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiImageOcrByIdResponses, PostApiImageOcrByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/image/ocr/{id}',
        ...options
    });
};
